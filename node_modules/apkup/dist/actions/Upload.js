"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var debug_1 = __importDefault(require("debug"));
var fs_1 = require("fs");
var Edit_1 = require("../Edit");
var helpers_1 = require("../helpers");
var debug = debug_1.default('apkup:Upload');
/**
 * Create an Upload to Google Play!
 */
var Upload = /** @class */ (function (_super) {
    __extends(Upload, _super);
    function Upload(client, apk, uploadParams, editParams) {
        if (uploadParams === void 0) { uploadParams = {}; }
        var _this = _super.call(this, client, editParams) || this;
        _this.versionCodes = [];
        assert_1.default(apk, 'I require an APK file');
        if (uploadParams.track) {
            uploadParams.track = uploadParams.track.toLowerCase();
            assert_1.default(helpers_1.checkTrack(uploadParams.track), 'Unknown track');
        }
        _this.apk = typeof apk === 'string' ? [apk] : apk;
        _this.uploadParams = uploadParams;
        _this.uploadParams.track = uploadParams.track || 'internal';
        _this.uploadParams.obbs = uploadParams.obbs || [];
        _this.uploadParams.releaseNotes = uploadParams.releaseNotes || [];
        return _this;
    }
    Upload.prototype.makeEdits = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.uploadAPK()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.uploadOBBs()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.assignTrack()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Upload.prototype.uploadAPK = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uploads;
            var _this = this;
            return __generator(this, function (_a) {
                debug('> Uploading release');
                uploads = this.apk.map(function (apk) { return __awaiter(_this, void 0, void 0, function () {
                    var uploadJob;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.publisher.edits.apks.upload({
                                    editId: this.editId,
                                    media: {
                                        body: fs_1.createReadStream(apk),
                                        mimeType: 'application/vnd.android.package-archive'
                                    },
                                    packageName: this.editParams.packageName
                                })];
                            case 1:
                                uploadJob = _a.sent();
                                debug("> Uploaded " + apk + " with version code " + uploadJob.data.versionCode + " and SHA1 " + (uploadJob.data.binary && uploadJob.data.binary.sha1));
                                this.versionCodes.push(uploadJob.data.versionCode);
                                return [2 /*return*/, uploadJob];
                        }
                    });
                }); });
                return [2 /*return*/, Promise.all(uploads)];
            });
        });
    };
    Upload.prototype.uploadOBBs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.uploadParams.obbs ||
                    !Array.isArray(this.uploadParams.obbs) ||
                    !this.uploadParams.obbs.length) {
                    return [2 /*return*/];
                }
                debug("> Uploading " + this.uploadParams.obbs.length + " expansion file(s)");
                return [2 /*return*/, Promise.all(this.uploadParams.obbs.map(function (obb) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, this.uploadOBB(obb)];
                    }); }); }))];
            });
        });
    };
    Upload.prototype.uploadOBB = function (obb) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                debug("> Uploading expansion file " + obb);
                return [2 /*return*/, this.publisher.edits.expansionfiles.upload({
                        apkVersionCode: this.editParams.versionCode,
                        editId: this.editId,
                        expansionFileType: 'main',
                        media: {
                            body: fs_1.createReadStream(obb),
                            mimeType: 'application/octet-stream'
                        },
                        packageName: this.editParams.packageName
                    }, {})];
            });
        });
    };
    Upload.prototype.assignTrack = function () {
        return __awaiter(this, void 0, void 0, function () {
            var trackUpdate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug("> Assigning APK to " + this.uploadParams.track + " track");
                        return [4 /*yield*/, this.publisher.edits.tracks.update({
                                editId: this.editId,
                                packageName: this.editParams.packageName,
                                requestBody: {
                                    releases: [
                                        {
                                            releaseNotes: this.uploadParams.releaseNotes,
                                            status: 'completed',
                                            versionCodes: this.versionCodes
                                        }
                                    ],
                                    track: this.uploadParams.track
                                },
                                track: this.uploadParams.track
                            }, {})];
                    case 1:
                        trackUpdate = _a.sent();
                        debug("> Assigned APK to " + this.uploadParams.track + " track");
                        return [2 /*return*/, trackUpdate];
                }
            });
        });
    };
    return Upload;
}(Edit_1.Edit));
exports.Upload = Upload;
