"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var googleapis_1 = require("googleapis");
var Promote_1 = require("./actions/Promote");
var Upload_1 = require("./actions/Upload");
var helpers_1 = require("./helpers");
/**
 * Apkup constructor
 *
 * ```typescript
 * import { Apkup } from 'apkup'
 *
 * const auth = require('./auth.json')
 * const apkup = new Apkup(auth)
 * ```
 */
var Apkup = /** @class */ (function () {
    /**
     * @param {object} auth Object with Authentication information.
     * @param {object} auth.client_email Google Client Email
     * @param {object} auth.private_key Google Private Key
     */
    function Apkup(auth) {
        assert_1.default(auth.client_email, 'Missing required parameter client_email');
        assert_1.default(auth.private_key, 'Missing required parameter private_key');
        this.client = new googleapis_1.google.auth.JWT(auth.client_email, undefined, auth.private_key, ['https://www.googleapis.com/auth/androidpublisher']);
    }
    /**
     * Upload an APK to the Google Play Developer Console.
     * @param {string} apk The path to the APK.
     * @param {object} uploadParams The params object will add additional information to this release.
     *
     * @returns An object with the response data.
     *
     * ```typescript
     * const upload = await apkup.upload('./android-debug.apk', {
     *   track: 'beta',
     *   releaseNotes: [
     *     {
     *       language: 'en-US',
     *       text: 'Minor bug fixes...'
     *     }
     *   ]
     * })
     * ```
     */
    Apkup.prototype.upload = function (apk, uploadParams) {
        return __awaiter(this, void 0, void 0, function () {
            var apkPackage, editParams, upload;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, helpers_1.parseManifest(apk)];
                    case 1:
                        apkPackage = _a.sent();
                        editParams = {
                            packageName: apkPackage.packageName,
                            versionCode: apkPackage.versionCode
                        };
                        upload = new Upload_1.Upload(this.client, apk, uploadParams, editParams);
                        return [2 /*return*/, upload.run()];
                }
            });
        });
    };
    /**
     * Promote an APK from one track to another.
     *
     * @param {object} promoteParams Information related to the promotion.
     * @param {string} apk The path to the APK.
     * @param {object} editParams The package name and version code of the app.
     *
     * ```typescript
     * // promote based on an APK
     * await apkup.promote(
     *   {
     *     track: 'alpha'
     *   },
     *   './android-debug.apk'
     * )
     *
     * // promote based on package name and version code
     * await apkup.promote(
     *   {
     *     track: 'alpha'
     *   },
     *   {
     *     packageName: 'io.event1.shared',
     *     versionCode: 137
     *  }
     * )
     * ```
     */
    Apkup.prototype.promote = function (promoteParams, apk, editParams) {
        return __awaiter(this, void 0, void 0, function () {
            var edit, apkPackage, promote;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!apk) return [3 /*break*/, 2];
                        return [4 /*yield*/, helpers_1.parseManifest(apk)];
                    case 1:
                        apkPackage = _a.sent();
                        edit = {
                            packageName: apkPackage.packageName,
                            versionCode: apkPackage.versionCode
                        };
                        return [3 /*break*/, 3];
                    case 2:
                        if (editParams) {
                            edit = editParams;
                        }
                        else {
                            throw new Error('Either apk or package-name and version-code are required');
                        }
                        _a.label = 3;
                    case 3:
                        promote = new Promote_1.Promote(this.client, edit, promoteParams);
                        return [2 /*return*/, promote.run()];
                }
            });
        });
    };
    return Apkup;
}());
exports.Apkup = Apkup;
