"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var debug_1 = __importDefault(require("debug"));
var googleapis_1 = require("googleapis");
var debug = debug_1.default('apkup:Edit');
/**
 * Creates an Edit.
 *
 * This class should be extended by another class and `makeEdits` should be overridden.
 *
 * ```typescript
 * class Promote extends Edit {
 *  constructor(client: JWT, editParams: IEditParams) {
 *    super(client, editParams)
 *  }
 *
 *  public async makeEdits {
 *    // make edits here!
 *  }
 * }
 * ```
 */
var Edit = /** @class */ (function () {
    function Edit(client, editParams) {
        assert_1.default(client, 'I require a client');
        assert_1.default(editParams.packageName, 'I require a package name');
        assert_1.default(editParams.versionCode, 'I require a version code');
        this.client = client;
        this.publisher = googleapis_1.google.androidpublisher({
            auth: client,
            version: 'v3'
        });
        this.editParams = editParams;
    }
    /**
     * This method should be overridden to make your own changes.
     */
    Edit.prototype.makeEdits = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('makeEdits not implemented!');
            });
        });
    };
    /**
     * Run the edit
     */
    Edit.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // authenticate the client
                    return [4 /*yield*/, this.authenticate()
                        // create the edit
                    ];
                    case 1:
                        // authenticate the client
                        _a.sent();
                        // create the edit
                        return [4 /*yield*/, this.createEdit()
                            // run the edits (this should be overridden via a sub-class)
                        ];
                    case 2:
                        // create the edit
                        _a.sent();
                        // run the edits (this should be overridden via a sub-class)
                        return [4 /*yield*/, this.makeEdits()
                            // commit the changes
                        ];
                    case 3:
                        // run the edits (this should be overridden via a sub-class)
                        _a.sent();
                        // commit the changes
                        return [4 /*yield*/, this.commitChanges()];
                    case 4:
                        // commit the changes
                        _a.sent();
                        return [2 /*return*/, {
                                packageName: this.editParams.packageName,
                                versionCode: this.editParams.versionCode
                            }];
                }
            });
        });
    };
    Edit.prototype.authenticate = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug('> Authenticating');
                        return [4 /*yield*/, this.client.authorize()];
                    case 1:
                        _a.sent();
                        debug('> Authenticated successfully');
                        return [2 /*return*/];
                }
            });
        });
    };
    Edit.prototype.createEdit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var edit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug('> Creating edit');
                        return [4 /*yield*/, this.publisher.edits.insert({
                                packageName: this.editParams.packageName
                            })];
                    case 1:
                        edit = _a.sent();
                        if (!edit) {
                            throw new Error('Unable to create edit');
                        }
                        debug("> Created edit with id " + edit.data.id);
                        this.editId = edit.data.id;
                        return [2 /*return*/];
                }
            });
        });
    };
    Edit.prototype.commitChanges = function () {
        return __awaiter(this, void 0, void 0, function () {
            var editCommit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug('> Commiting changes');
                        return [4 /*yield*/, this.publisher.edits.commit({
                                editId: this.editId,
                                packageName: this.editParams.packageName
                            })];
                    case 1:
                        editCommit = _a.sent();
                        debug('> Commited changes');
                        return [2 /*return*/, editCommit];
                }
            });
        });
    };
    return Edit;
}());
exports.Edit = Edit;
