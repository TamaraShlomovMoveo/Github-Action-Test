"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var debug_1 = __importDefault(require("debug"));
var helpers_1 = require("./../helpers");
var Edit_1 = require("./../Edit");
var debug = debug_1.default('apkup:Promote');
var Promote = /** @class */ (function (_super) {
    __extends(Promote, _super);
    function Promote(client, editParams, promoteParams) {
        var _this = _super.call(this, client, editParams) || this;
        if (promoteParams.track) {
            promoteParams.track = promoteParams.track.toLowerCase();
            assert_1.default(helpers_1.checkTrack(promoteParams.track), 'Unknown track');
        }
        _this.promoteParams = promoteParams;
        return _this;
    }
    Promote.prototype.makeEdits = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.findPreviousTrack()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.findPreviousRelease()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.assignTrack()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.removePreviousTrack()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Promote.prototype.findRelease = function (track) {
        var _this = this;
        if (!track || !track.releases) {
            return null;
        }
        return track.releases.find(function (r) {
            return (r.versionCodes &&
                r.versionCodes.includes(_this.editParams.versionCode.toString()) &&
                r.status &&
                r.status === 'completed');
        });
    };
    Promote.prototype.findPreviousTrack = function () {
        return __awaiter(this, void 0, void 0, function () {
            var list, previousTrack;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        debug("> Finding the previous track");
                        return [4 /*yield*/, this.publisher.edits.tracks.list({
                                editId: this.editId,
                                packageName: this.editParams.packageName
                            })];
                    case 1:
                        list = _a.sent();
                        if (list.data.tracks) {
                            previousTrack = list.data.tracks.find(function (t) {
                                var track = _this.findRelease(t);
                                return !!track;
                            });
                            this.previousTrack = previousTrack;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Promote.prototype.findPreviousRelease = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                debug("> Finding the previous release");
                if (!this.previousTrack) {
                    throw new Error('Previous track not found! Has this version been uploaded? ');
                }
                else if (this.previousTrack.track === this.promoteParams.track) {
                    throw new Error("The previous track (" + this.previousTrack.track + ") is the same as the one that you are trying to promote to (" + this.promoteParams.track + ").");
                }
                this.previousRelease = this.findRelease(this.previousTrack);
                return [2 /*return*/];
            });
        });
    };
    Promote.prototype.assignTrack = function () {
        return __awaiter(this, void 0, void 0, function () {
            var newTrack, trackUpdate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        newTrack = this.promoteParams.track;
                        debug("> Assigning APK to " + newTrack + " track");
                        return [4 /*yield*/, this.publisher.edits.tracks.update({
                                editId: this.editId,
                                packageName: this.editParams.packageName,
                                requestBody: {
                                    releases: [
                                        {
                                            releaseNotes: this.previousRelease && this.previousRelease.releaseNotes,
                                            status: 'completed',
                                            versionCodes: [this.editParams.versionCode.toString()]
                                        }
                                    ],
                                    track: newTrack
                                },
                                track: newTrack
                            }, {})];
                    case 1:
                        trackUpdate = _a.sent();
                        debug("> Assigned APK to " + this.promoteParams.track + " track");
                        return [2 /*return*/, trackUpdate];
                }
            });
        });
    };
    Promote.prototype.removePreviousTrack = function () {
        return __awaiter(this, void 0, void 0, function () {
            var oldTrack, trackUpdate;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oldTrack = this.previousTrack && this.previousTrack.track;
                        debug("> Removing APK from " + oldTrack + " track");
                        return [4 /*yield*/, this.publisher.edits.tracks.update({
                                editId: this.editId,
                                packageName: this.editParams.packageName,
                                requestBody: {
                                    releases: [],
                                    track: oldTrack
                                },
                                track: oldTrack
                            }, {})];
                    case 1:
                        trackUpdate = _a.sent();
                        debug("> Removed APK from " + oldTrack + " track");
                        return [2 /*return*/, trackUpdate];
                }
            });
        });
    };
    return Promote;
}(Edit_1.Edit));
exports.Promote = Promote;
