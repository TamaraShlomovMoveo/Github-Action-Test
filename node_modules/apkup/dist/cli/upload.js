"use strict";
// tslint:disable: no-console
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert_1 = __importDefault(require("assert"));
var ora_1 = __importDefault(require("ora"));
var index_1 = require("../index");
exports.upload = {
    aliases: ['$0'],
    builder: function (cmd) {
        cmd
            .option('track', {
            alias: 't',
            default: 'internal',
            describe: "Can be 'internal', 'alpha', 'beta', 'production' or 'rollout'. Default: 'internal'",
            type: 'string'
        })
            .option('release-notes', {
            alias: 'r',
            describe: "A string with the format 'lang=changes'",
            type: 'array'
        })
            .option('obbs', {
            alias: 'o',
            describe: 'Path to optional expansion files (max 2)',
            type: 'array'
        })
            .demandOption(['apk']);
    },
    command: 'upload [options]',
    desc: 'Upload an APK',
    handler: function (argv) {
        var options = {
            obbs: argv.obbs,
            releaseNotes: [],
            track: argv.track
        };
        if (argv.releaseNotes) {
            options.releaseNotes = [];
            for (var _i = 0, _a = argv.releaseNotes; _i < _a.length; _i++) {
                var change = _a[_i];
                assert_1.default.strictEqual(change.includes('='), true, 'Unable to parse release notes');
                var parts = change.split('=');
                assert_1.default.strictEqual(parts.length, 2, 'Unable to parse release notes');
                options.releaseNotes.push({
                    language: parts[0],
                    text: parts[1]
                });
            }
        }
        var apkup = new index_1.Apkup(argv.auth);
        var spinner = ora_1.default('Uploading APK...').start();
        apkup
            .upload(argv.apk, options)
            .then(function (resp) {
            spinner.stop();
            console.log('Upload successful!');
        })
            .catch(function (err) {
            spinner.stop();
            console.error('ERROR:', err.message);
            process.exit(1);
        });
    }
};
